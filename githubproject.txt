#PGA
import pandas as pd
import numpy as np
df=pd.read_csv('pga.csv')
print(df)
  

df2=pd.read_csv('pga.csv')
print(df2)


df2['WIN%'].fillna(0, inplace=True)
print(df2)


df2['WIN%'].fillna('0%', inplace=True)
print(df2)


df2['WIN%']=df2['WIN%'].replace(0,'0%')
print(df2)
 

df2['T10%'].fillna('0%', inplace=True)
print(df2)
  

df2.drop(['WinOdds', 'Value', 'Position'], axis=1, inplace=True)
print(df2)


df3=df2.copy()
print(df3)


df3.drop(['Player','WSCORE','COURSE RANK','WIN%','T10%','SGT-5'], axis=1, inplace=True)
print(df3)


X=df2['SG'].values
#determining x and y
x=df3['WDIST'].values
y=df3['SG'].values
sg_dist=(['x','y'])
print(sg_dist)


sg_dist=df3.drop(['WACC','WAPP','WARG','PGA RANK'], axis=1)
print(sg_dist)


#Machine Learning
from pandas import read_csv
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
dataset = read_csv(url, names=names)
print(dataset)

#PGA Winners KPIs
winners=pd.read_csv('pgawinners.csv')
print(winners)

winnervalues=winners.drop(['Player'], axis=1)
print(winnervalues)

kpiaverages=winnervalues.mean()
print(kpiaverages)

kpicoefficients=42.00/kpiaverages
print(kpicoefficients)

#PGA Rank vs Field
rankvsfield=pd.read_csv('rankvsfield.csv')
rankvsfield

rankvsfield=rankvsfield.drop(['Player'], axis=1)

import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import linregress

#Scatter Plot
plt.scatter(rankvsfield['Course Rank'], rankvsfield['Field Strength OWGR'])

#Linear Fit Line
slope, intercept, r_value, p_value, std_err = linregress(rankvsfield['Course Rank'], rankvsfield['Field Strength OWGR'])
line = slope * rankvsfield['Course Rank'] + intercept

# Plot linear fit line
plt.plot(rankvsfield['Course Rank'], line, color='red', label='Linear Fit Line')

#labels and titles
plt.xlabel('Rank')
plt.ylabel('Field')
plt.title('Scatter Plot with Linear Fit Line')

plt.legend()

plt.show()

#import 2022 winner course ranks
winnerrank2022=pd.read_csv('2022winners.csv')
winnerrank2022
winnerrank2022=winnerrank2022.drop(['Winner'], axis=1)
winnerrank2022

#create winnerrank2023
winnerrank2023=rankvsfield.drop(['Field Strength OWGR'], axis=1)
winnerrank2023

#concat into a new dataframe
rank_df = pd.concat([winnerrank2023, winnerrank2022], axis=0, ignore_index=True)
rank_df.columns = ['Rank']
rank_df

#visualise the data in a histogram
plt.hist(rank_df['Rank'], bins=79, alpha=0.7, color='blue', edgecolor='black')

plt.xlabel('Rank')
plt.ylabel('Frequency')
plt.title('Winner Ranks')
plt.show()

#plot a probability distribution function
sns.histplot(rank_df['Rank'], kde=True, color='blue', edgecolor='black')

#add labels and title
plt.xlabel('Rank')
plt.ylabel('Probability Density')
plt.title('PDF of Rank Values')
plt.show()

#Find percentage chances for a win within rank threshold
percentiles = np.percentile(rank_df['Rank'], np.arange(0, 101, 1))
for p, percentile in zip(range(0, 101, 1), percentiles):
 print(f'Percentile {p}: {percentile}')

# Create an area chart for percentiles
plt.fill_between(np.arange(0, 101, 1), 0, percentiles, color='blue', alpha=0.4)

# add labels and title
plt.xlabel('Percentile')
plt.ylabel('Rank Value')
plt.title('Area Chart of Percentiles for Rank Values')

plt.show()

#I can infer there is a 37% chance of ranks 1-3 winning the event
#If I placed proportional stakes on 1, 2 and 3 rank players of winning (based on their weighted scores) this gives me my best value strategy from a risk return profile

#Weighting a Â£100 stake to each players weighted scores
df2.head(3)

selections=df2.head(3)
selections

#calculate stake proportions
stakes = (selections['WSCORE'].sum() / selections['WSCORE'])
stakes

total_stake=100
stakevalues=stakes.sum()
stakesclean=(stakes/stakevalues)*total_stake
stakesclean

stakesclean.round(2)

stakesclean=stakesclean.round(2)
stakesclean

finalselections = pd.concat([selections['Player'], stakesclean], axis=1)
finalselections

finalselections.rename(columns={'Player': 'Player', 'Proportion': 'Stake'}, inplace=True)
finalselections

finalselections.rename(columns={'Player': 'Player', 'WSCORE': 'Stake'}, inplace=True)
finalselections